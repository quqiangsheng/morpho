<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd 
	http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd
	">
	<!--springMVC配置文件  -->
	
	<!-- 导入springMVC和shiro整合的配置文件-->
	<import resource="applicationContext-mvc-shiro.xml"/>
	<!--引入属性文件:
		1、spring4.x dispatcherServlet 和  applicationContext是两个独立的context
	    2、如果要在controller中使用@Value获取property文件中的属性值，必须在springmvc.xml文件中再次引入属性文件
	   -->
	<bean id="configProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
				<value>classpath:config.properties</value>
            </list>
        </property>
    </bean>
	
	 
	<!--通知spring使用cglib而不是jdk的来生成代理方法, AOP可以拦截到Controller,因为是拦截Controller,这句必须加在springmvc配置文件中 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<!--默认jsp视图解析器  -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="1" />
	</bean>
	<!-- 字符串转换时间戳 -->
    <bean id="stringToTimestamp" class="com.max256.morpho.common.web.converter.StringToTimestamp"></bean>
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="stringToTimestamp"/>
            </set>
        </property>
    </bean>
	<!--mvc注解驱动  -->
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" conversion-service="conversionService">
    	<!--将StringHttpMessageConverter的默认编码设为UTF-8 ，为了防止乱码，保持全站UTF-8格式 -->
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
            <bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean class="com.fasterxml.jackson.databind.ObjectMapper">
						<property name="dateFormat">
							<bean class="java.text.SimpleDateFormat">
								<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
							</bean>
						</property>
					</bean>
				</property>
			</bean>
        </mvc:message-converters>
        
        <!-- 
        	此处注册了一个@CurrentUser参数解析器。如之前的IndexController，从request获取shiro sysUser拦截器放入的当前登录User对象。
         -->
        <mvc:argument-resolvers>
            <bean class="com.max256.morpho.common.security.shiro.bind.method.CurrentUserMethodArgumentResolver"/>
            <bean class="com.max256.morpho.common.security.shiro.bind.method.RequestMessageMethodArgumentResolver"/>
        </mvc:argument-resolvers>
        
        
        <!-- 处理responseBody 里面日期类型 -->
		<!-- <mvc:message-converters>
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean class="com.fasterxml.jackson.databind.ObjectMapper">
						<property name="dateFormat">
							<bean class="java.text.SimpleDateFormat">
								<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
							</bean>
						</property>
					</bean>
				</property>
			</bean>
			
			
		</mvc:message-converters> -->
		
		
	 </mvc:annotation-driven>
    
    <!-- 定义无需Controller的url path<->view-name直接映射 
	<mvc:view-controller path="/" view-name="/index" />
    -->
    
	<!-- 配置哪些是静态资源，需要解开注释自己添加,可以多个-->
	<!--     <mvc:resources location="/static/" mapping="/static/**"/> -->
	<mvc:resources mapping="/api/**" location="/WEB-INF/springfox/" />
	<!-- 静态资源访问：
		DefaultAnnotationHandlerMapping的order属性值是：0
		<mvc:resources/ >自动注册的 SimpleUrlHandlerMapping的order属性值是： 2147483646
		<mvc:default-servlet-handler/>自动注册 的SimpleUrlHandlerMapping 的order属性值是： 2147483647
		spring会先执行order值比较小的。当访问一个a.jpg图片文件时，先通过 DefaultAnnotationHandlerMapping 来找处理器，
		一定是找不到的，我们没有叫a.jpg的Action。再按order值升序找，由于最后一个 SimpleUrlHandlerMapping 匹配 "/**"的，
		所以一定会匹配上，再响应图片。
		总结：先找hanler找不到 再找 <mvc:resources/ >找不到继续找<mvc:default-servlet-handler/>匹配"/**"-->
	<mvc:default-servlet-handler />
	
	
    
   	<!-- 组件扫描只扫描controller层 -->
	<context:component-scan base-package="com.max256.morpho" use-default-filters="false">
	    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	    <!-- 即把@ControllerAdvice注解内部使用@ExceptionHandler、@InitBinder、@ModelAttribute注解的方法应用到所有的 @RequestMapping注解的方法。
	    	  非常简单，不过只有当使用@ExceptionHandler最有用，另外两个用处不大。 -->
	    <context:include-filter type="annotation"  expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>
    
    
     <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="mediaTypes">
			<value>
				json=application/json
				xml=application/xml
			</value>
		</property>
	</bean>
    
    
	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="${upload.defaultEncoding}" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="${upload.maxInMemorySize}" />
		<!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<property name="maxUploadSize" value="${upload.maxUploadSize}" />
		<!-- 上传文件临时目录 -->
		<property name="uploadTempDir" value="${upload.uploadTempDir}"/>
	</bean>
	
	
	<!-- SpringMVC在超出上传文件限制时，
		会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>
			</props>
		</property>
	</bean>
	
	<!-- 在springMVC层做统一异常处理 -->
    <!-- 自定义统一异常处理解析器-->
	<bean id="myExceptionResolver" class="com.max256.morpho.common.exception.MyExceptionResolver"/>
	
	<!-- ApplicationContextUtil工具类 -->
	<bean class="com.max256.morpho.common.util.ApplicationContextUtils" />
	
	

	<!-- 拦截器配置，拦截顺序：先执行后定义的，排在第一位的最后执行。 -->
	<!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
	<!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
	<!-- <mvc:interceptors>
		<mvc:interceptor>
			日志拦截器 
			<mvc:mapping path="/home/**" />
			<mvc:mapping path="/backstage/**" />
			<bean class="com.max256.morpho.common.web.interceptor.LogInterceptor"></bean>
		</mvc:interceptor>	
	</mvc:interceptors> -->
	

	<!-- sysResourceHandlerSpringContextListener处理资源注解 -->
	<!-- <bean id="sysResHandlerSpringContextListener"
		class="com.max256.morpho.common.web.listener.SysResHandlerSpringContextListener">
		<property name="generateFlag" value="${sysResource.generateFlag}" />
	</bean> -->
	

</beans>