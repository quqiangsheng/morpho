<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       "
	default-lazy-init="true">
	<!-- 本配置是集群环境下session共享的解决方案 本配置依赖于applicationContext-redis的配置文件 -->
	<description>Shiro安全配置(redis集群版本)</description>


	<!--安全管理器（shiro的核心） -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!--设置自定义Realm -->
		<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
		<property name="realm" ref="shiroDbRealm" />
		<!--将session管理器注入给安全管理器 这里是分布式session -->
		<property name="sessionManager" ref="sessionManager" />
		<!-- 使用下面配置的缓存管理器 -->
		<!-- 设置SecurityManager的cacheManager， 会自动设置实现了CacheManagerAware接口的相应对象，这里使用redis作为分布式缓存的缓存管理器 -->
		<property name="cacheManager" ref="redisShiroCacheManager" />
		<!-- 设置securityManager安全管理器的rememberMeManager； -->
		<!-- <property name="rememberMeManager" ref="rememberMeManager"/> -->
	</bean>



	<!-- 凭证匹配器 -->
	<bean id="credentialsMatcher"
		class="com.max256.morpho.common.security.shiro.RetryLimitHashedCredentialsMatcher">
		<!-- hashAlgorithmName必须的，没有默认值。可以有MD5或者SHA-1，如果对密码安全有更高要求可以用SHA-256或者更高。 
			这里使用MD5 storedCredentialsHexEncoded默认是true，此时用的是密码加密用的是Hex编码；false时用Base64编码 
			hashIterations迭代次数，默认值是1。 -->
		<constructor-arg index="0" name="cacheManager" ref="redisShiroCacheManager" />
		<constructor-arg index="1" name="redisManager" ref="redisManager"/>
		<property name="hashAlgorithmName" value="${shiro.credentialsMatcher.hashAlgorithmName}" />
		<property name="hashIterations" value="${shiro.credentialsMatcher.hashIterations}" />
		<!-- 是否存储散列后的密码为16进,制这里需要和注册时使用的加密方式一样，都使用MD5加密，此时用的是密码加密用的是Hex编码,密码匹配也需和注册时的加密方式一致 -->
		<property name="storedCredentialsHexEncoded" value="${shiro.credentialsMatcher.storedCredentialsHexEncoded}" />
		<!-- 是否开启登录次数重试限制 -->
		<property name="enableRetryLimit" value="${login.enableRetryLimit}" />
		<!-- 允许的最大失败次数 -->
		<property name="allowAttemptNum" value="${login.allowAttemptNum}" />
		<!-- 锁定时间 单位秒 -->
		<property name="lockTime" value="${login.lockTime}" />
	</bean>


	<!-- 自定义的Realm -->
	<bean id="shiroDbRealm" class="com.max256.morpho.common.security.shiro.ShiroDbRealm">
		<!-- 注入凭证管理器 -->
		<property name="credentialsMatcher" ref="credentialsMatcher" />
		<!-- 以下是认证和授权时是否使用缓存的设置 -->
		<!-- 对realm shiro默认不启用缓存 ，在这里显式地写出来 -->
		<property name="cachingEnabled" value="true" />
		<!-- 如需要自定义缓存时间放开以下.修改 ehcache.xml -->
		<!-- 启用身份验证缓存，即缓存AuthenticationInfo信息，默认false -->
		<property name="authenticationCachingEnabled" value="false" />
		<!-- 缓存AuthenticationInfo信息的缓存名称 -->
		<property name="authenticationCacheName" value="authenticationCache" />
		<!-- 启用授权缓存，即缓存AuthorizationInfo信息，默认false -->
		<property name="authorizationCachingEnabled" value="true" />
		<!-- 缓存AuthorizationInfo信息的缓存名称 -->
		<property name="authorizationCacheName" value="authorizationCache" />
	</bean>




	<!-- Shiro Filter过滤器配置 该bean与web.xml里的shiroFilter对应 -->
	<!--!!!还没修复完 先使用原生的 不影响实际功能 bug修复 重写了该类org.apache.shiro.spring.web.ShiroFilterFactoryBean 
		为com.max256.morpho.common.security.shiro.bugfix.MyShiroHttpServletResponse改进了有时候url会出现JSESSIONID的url重写现象 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 安全管理器 -->
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- filters属性也是可选的，用来声明一些可以在filterChainDefinitions 里面使用的filter。如果你声明的filter 
			名称是shiro默认有的，那么将会覆盖默认的filter -->
		<property name="filters">
			<util:map>
				<!-- 比如：这个filter是shiro里面有的，那么自定义的filter将会覆盖默认的 -->
				<entry key="authc" value-ref="authcFilter" />
				<!-- 比如：这个filter是项目新加的filter -->
				<entry key="captchaValidate" value-ref="captchaValidateFilter" />
				<!--把SysUser放入到request域中 -->
				<entry key="sysUser" value-ref="sysUserFilter" />
				<!-- 访问时判断有没有被强制退出 -->
				<entry key="forceLogout" value-ref="forceLogoutFilter" />
				<!-- 解密传输 -->
				<entry key="encrypt" value-ref="encryptFilter" />
			</util:map>
		</property>
		<!-- 默认的登陆访问url -->
		<!--链接到登录页面,如果没有登录，直接访问一个url，也会跳转到登录页面 -->
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<!--必须配置 不配置的话默认会自动寻找Web工程根目录下的"/login.jsp"页面 这样就不通过springMVC的控制器了 可能会造成页面嵌套重定向 -->
		<!-- 请注意和authcFilter里配置的保持一致 -->
		<!-- 坑呀！！！这个是登录页面显示页面的url 必须配置 -->
		<property name="loginUrl" value="${shiro.login.url}" />
		<!-- successUrl ：登陆成功后跳转的url，非必须，但是建议必须配，可以在代码中指定登录成功后的转跳地址 -->
		<!-- successUrl ：登录成功默认跳转页面，不配置则跳转至url ”/”。如果登陆前点击的一个需要登录的页面， 则在登录自动跳转到那个需要登录的页面（会自动记忆那个页面的url）。不跳转到此。但是最好还是在这里配置它 
			因为如果一个session结束 一个新的session开始，他肯定没记住之前访问的页面 但是此时默认的url==‘/’，这时这个url有可能不是我们系统的后台主页面 
			可能会跳转到错误页面 -->
		<!-- 这也是坑 似乎没什么用 先写这里 但是authc的successUrl是有用的必须配置 -->
		<!-- 不写上好像也不行呀！！！ -->
		<!-- private void applySuccessUrlIfNecessary(Filter filter) { String successUrl 
			= getSuccessUrl(); if (StringUtils.hasText(successUrl) && (filter instanceof 
			AuthenticationFilter)) { AuthenticationFilter authcFilter = (AuthenticationFilter) 
			filter; //only apply the successUrl if they haven't explicitly configured 
			one already: String existingSuccessUrl = authcFilter.getSuccessUrl(); if 
			(AuthenticationFilter.DEFAULT_SUCCESS_URL.equals(existingSuccessUrl)) { authcFilter.setSuccessUrl(successUrl); 
			} } } 根据源码：successUrl是这里配置的successUrl,如果这里配置了successUrl并且过滤器类型是AuthenticationFilter的话 
			判断AuthenticationFilter里是否配置了successUrl，如果AuthenticationFilter没有配置，就把ShiroFilterFactoryBean里 
			的successUrl赋值给AuthenticationFilter的successUrl 源码有bug： 没有考虑到请求是类似http://ip/morpho这种请求时morpho在servlet容器中是项目名称 
			但是shiro会把他认为这是你要记住访问的上一个浏览页面 即使你配置了shiro的successUrl为你想要的登陆成功转跳页面但是SavedRequest里保存了/morpho这个相对路径 
			这样的话会把你配置单successUrl覆盖掉，shiro认为登陆成功后跳转的页面url应该为/morpho 这导致重新进入了项目的 根路径会再次跳转到登录页面造成没有跳转到你配置的successUrl 
			修正方法：修改源码 或者重写WebUtils的转跳规则 或者绕过这一点 这里采用绕过的方式 让访问时直接访问url /home页面这样需要认证就会自动到认证页面 
			认证成功就自动会退到/home页面 -->
		<property name="successUrl" value="${shiro.success.url}" />
		<!-- 没有权限跳转的url -->
		<!--如果当前用户在访问某一个资源的时候，没有被授权，应该跳转到的页面 -->
		<property name="unauthorizedUrl" value="${shiro.unauthorized.url}" />
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<!-- 动态加载权限 -->
		<property name="filterChainDefinitions"
			value="#{chainDefinitionService.initFilterChainDefinitions()}" />
	</bean>



	<!--rememberMeCookie模板 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- 即保存到客户端记住我cookie的名字 -->
		<constructor-arg value="remember_me_id" />
		<property name="httpOnly" value="true" />
		<!-- 30天 -->
		<property name="maxAge" value="2592000" />
	</bean>

	<!-- rememberMe管理器 -->
	<!-- <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager"> 
		rememberme cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） rememberMe管理器，cipherKey是加密rememberMe 
		Cookie的密钥；默认AES算法； <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0TTA3Kprsdag==')}"/> 
		decode里面可以写${shiro.uid.rememeberMe.cookie.base64.cipherKey}从config.properties来读取 
		<property name="cookie" ref="rememberMeCookie"/> </bean> -->



	<!-- sessionIdCookie是用于生产Session ID Cookie的模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 
			等默认JSESSIONID, 当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
		<constructor-arg name="name" value="sid" />
		<!-- 如果设置为true，则客户端不会暴露给客户端脚本代码，使用HttpOnly cookie有助于减少某些类型的跨站点脚本攻击；此特性需要实现了Servlet 
			2.5 MR6及以上版本的规范的Servlet容器支持； -->
		<property name="httpOnly" value="true" />
		<!-- 设置Cookie的过期时间，秒为单位，默认-1表示关闭浏览器时过期Cookie -->
		<property name="maxAge" value="-1" />
	</bean>

	<!-- sessionId生成器 ，不配置也行也行默认的，这里明确地配置出来 -->
	<!-- 默认的 SessionIdGenerator 是一个 JavaUuidSessionIdGenerator，它能产生基于 Java UUIDs 
		的 String IDs。该实现能够 支持所有的生产环境。 -->
	<bean id="sessionIdGenerator"
		class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

	<!-- shiro filter 定义工厂 -->
	<bean id="chainDefinitionService"
		class="com.max256.morpho.common.security.shiro.service.impl.ChainDefinitionServiceImpl" />

	<!-- Shiro 的默认配置本地 SessionManagers 使用仅内存 Session 存储。这是不适合大多数应用程序的。大多数生产应用 
		程序想要配置提供的 EHCache（见下文）支持或提供自己的 SessionDAO 实现。 请注意 Web 应用程序默认使用基于 servlet 
		容器的 SessionManager，且没有这个问题。这也是使用 Shiro 本地 SessionManager 的唯一问题。 -->


	<!-- 会话验证quartz实现，升级shiro到1.2.6以上之后，SimpleTrigger变成了接口， 解决办法有两种： 1、自己重新实现SessionValidationScheduler类，QuartzSessionValidationScheduler 
		implements SessionValidationScheduler 2、使用ExecutorServiceSessionValidationScheduler代替QuartzSessionValidationScheduler -->
	<bean id="sessionValidationScheduler"
		class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
		<property name="sessionValidationInterval" value="60000" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>



	<!-- Web 应用程序默认不会使用本地的会话管理器，而是保持不支持 SessionDAO 的 Servlet Container 的默认会话 
		管理器。如果你想基于 Web 应用程序启用 SessionDAO 来自定义会话存储或会话群集，你将不得不首先配置一个本地的 Web 会话管理器。 -->
	<!-- 会话管理器 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 全局的会话信息设置成30分钟 -->
		<property name="globalSessionTimeout" value="1800000" />
		<!-- 默认地，某些应用程序可能不希望 Shiro 自动地删除会话。例如，如果一个应用程序已经提供了一个 SessionDAO 备 份数据存储查询，也许是应用程序团队希望旧的或无效的会话在一定的时间内可用。这将允许团队对数据存储运行 
			查询来判断， 例如， 在上周某个用户创建了多少个会话， 或一个用户会话的持续时间， 或与之类似报告类型的查询。 在这些情形中，你可以关闭 invalid 
			session deletion 项。 ps：请注意！如果你关闭了它，你得为确保你的会话数据存储不耗尽它的空间复杂。你必须自己从你的数据存储中删除 
			无效的会话！ 还要注意，即使你阻止了 Shiro 删除无效的会话，你仍然应该使用某种会话验证方式——要没通过 Shiro 的现有验证 机制，要么通过一个你自己提供的自定义的机制（见上述的"Disabling 
			Session Validation"获取更多）。验证机制将会 更新你的会话记录以反映无效的状态（例如，什么时候它是无效的，它最后一次被访问是什么时候，等等），即使 
			你在其他的一些时间将手动删除它们。 如果你配置 Shiro 来让它不会删除无效的会话，你得为确保你的会话数据存储不会耗尽它的空间负责。你必须亲自 
			从你的数据存储删除无效的会话！ 另外请注意，禁用会话删除并不等同于禁用 session validation schedule（会话验证调度）。你应该总是使用一个会话 
			验证调度机制——无论是 Shiro 直接支持或者是你自己的。 -->
		<!-- 是否删除无效的，默认也是开启 -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- SessionValidationScheduler 负责定期地验证会话以确保它们是否需要清理。 -->
		<!-- 在某些情况下，你可能希望禁用会话验证项，由于你建立了一个超出了 Shiro 控制的进程来为你执行验证。例如， 也许你正在使用一个企业的 
			Cache 并依赖于缓存的 Time To Live 设置来自动地去除旧的会话。或者也许你已经制定 了一个计划任务来自动清理一个自定义的数据存储。在这些情况下你可以关掉 
			session validation scheduling， 当会话从会话数据存储取回数据时它仍然会被验证，但这会禁用掉 Shiro 的定期验证。 
			ps：如果你关闭了 Shiro 的 session validation scheduler，你必须通过其他的机制（计划任务等）来执行定期的会话验证。 
			这是保证会话孤儿不会填充数据存储的唯一方法。 -->
		<!-- shiro默认也是开启 -->
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<!-- 相隔多久检查一次session的有效性 -->
		<property name="sessionValidationInterval" value="60000" />

		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<!-- sessionDao不进行依赖注入的话默认使用本机内存的session管理，只有注入了才会使用你指定的session持久化策略 -->
		<property name="sessionDAO" ref="redisShiroSessionDAO" />
		<!-- 是否启用/禁用Session Id Cookie，默认是启用的； 如果禁用后将不会设置Session Id Cookie， 即默认使用了Servlet容器的JSESSIONID， 
			且通过URL重写（URL中的“;JSESSIONID=id”部分）保存Session Id。 -->
		<property name="sessionIdCookieEnabled" value="true" />
		<property name="sessionIdCookie" ref="sessionIdCookie" />
		<property name="sessionListeners">
			<list>
				<ref bean="shiroSessionlistener" />
				<!-- <value-ref>shiroSessionlistener</value-ref> -->
			</list>
		</property>
	</bean>
	<!-- shiro session监听器注册 -->
	<bean id="shiroSessionlistener" class="com.max256.morpho.common.security.shiro.ShiroSessionListener"></bean>

	<!-- *********************************session管理******************************************* -->
	<!--shiro session管理器 shiroCacheManager有两种选择： 1、ehcache实现：EnterpriseCacheSessionDAO 
		2、redis实现 ：ShiroSessionDAO extends AbstractSessionDAO -->
	<!-- redis shiro session dao -->
	<bean id="redisShiroSessionDAO"
		class="com.max256.morpho.common.security.shiro.session.ShiroSessionDAO">
		<property name="shiroSessionRepository" ref="redisShiroSessionRepository" />
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
	</bean>


	<bean id="redisShiroSessionRepository"
		class="com.max256.morpho.common.security.shiro.session.redis.RedisShiroSessionRepository">
		<property name="redisManager" ref="redisManager" />
	</bean>

	<!-- *************************************cache管理************************************ -->
	<!--shiro cache管理器 shiroCacheManager有两种选择： 1、ehcache实现：ehcacheShiroCacheManager 
		2、redis实现 ：redisShiroCacheManager -->


	<!--redis cache管理器 -->
	<bean id="redisShiroCacheManager"
		class="com.max256.morpho.common.security.shiro.cache.redis.RedisShiroCacheManager">
		<property name="cacheManager" ref="redisManager" />
	</bean>



	<!-- *******************************************其他配置*************************************** -->
	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<!-- Shiro是从根对象SecurityManager进行身份验证和授权的；也就是所有操作都是自它开始的， 这个对象是线程安全且真个应用只需要一个即可，因此Shiro提供了SecurityUtils让我们绑定它为全局的，方便后续操作。 -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>


	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<!-- LifecycleBeanPostProcessor用于在实现了Initializable接口的Shiro bean初始化时调用Initializable接口回调， 
		在实现了Destroyable接口的Shiro bean销毁时调用 Destroyable接口回调。如UserRealm就实现了Initializable， 
		而DefaultSecurityManager实现了Destroyable。 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />






	<!-- ··················································· 自定义的shiro过滤器 ···················································· -->
	<!-- SysUserFilter -->
	<!--提取系统用户（SysUser） 验证用户是否合法的过滤器（如是否删除了 是否锁定了） -->
	<bean id="sysUserFilter"
		class="com.max256.morpho.common.security.shiro.filter.SysUserFilter">
	</bean>
	<!-- 验证强制踢人filter -->
	<bean id="forceLogoutFilter"
		class="com.max256.morpho.common.security.shiro.filter.ForceLogoutFilter">
	</bean>

	<!-- 纯验证码校验 -->
	<bean id="captchaValidateFilter"
		class="com.max256.morpho.common.security.shiro.filter.CaptchaValidateFilter">
		<property name="captchaEbabled" value="${login.enableCaptch}"></property>
	</bean>
	<!-- 解密请求数据过滤器 -->
	<bean id="encryptFilter"
		class="com.max256.morpho.common.security.shiro.filter.EncryptFilter">
	</bean>

	<!-- 基于自定义Form表单的身份验证过滤器 加入了验证码判断环节 -->
	<bean id="authcFilter"
		class="com.max256.morpho.common.security.shiro.filter.MyFormAuthenticationFilter">
		<!-- 请求参数中用户名的参数key -->
		<property name="usernameParam" value="${shiro.formAuthc.usernameParam}" />
		<!-- 请求参数中密码的参数key -->
		<property name="passwordParam" value="${shiro.formAuthc.passwordParam}" />
		<!-- 请求参数中是否记住我的参数key -->
		<!-- <property name="rememberMeParam" value="rememberMe"/> -->
		<!-- 需要身份验证请求用户的请求继续,如果这些请求没有认证,迫使用户通过重定向他们登录到{ @link # setLoginUrl(String)loginUrl 
			}你配置的url地址登录。 -->
		<!-- 这是坑呀！！！这是登录表单提交对应的url 和filter映射中的url -->
		<property name="loginUrl" value="${shiro.login.url}" />
		<!-- 默认的 public static final String DEFAULT_SUCCESS_URL = "/";需要手动指定登陆成功后跳转的地方 -->
		<!-- 这是坑呀 这个必须配 需要手动指定登陆成功后跳转的地方 他本身会保存上一次访问的地方 如果没有上一次访问的地方会转发到配置的这个url -->
		<!-- 这里不配置 因为 ShiroFilterFactoryBean里的配置会覆盖这里的配置而不采用 DEFAULT_SUCCESS_URL 
			= "/" -->
		<property name="successUrl" value="${shiro.success.url}" />
	</bean>

</beans>