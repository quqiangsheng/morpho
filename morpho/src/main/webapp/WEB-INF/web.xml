<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
  http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
  version="3.1"  metadata-complete="false">
  	<!-- 本项目要求servlet3.1以上容器tomcat8.0.X以上 -->
  	<display-name>morpho</display-name>
	<!--——————————————————————————————————————————————————————context-param配置——————————————————————————————————————————————————————-->
	<!--上下文参数用于配置spring核心的 applicationContext.xml -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	
	<context-param>
        <param-name>log4jContextName</param-name>
        <param-value>log4jContextName</param-value>
    </context-param>
    <!-- 
	    "webapp.root"这个字符串可以随便写任何字符串。如果不配置默认值是"webapp.root"。可以用System.getProperty("webapp.root")
	        来动态获项目的运行路径。般返回结果例如：/usr/local/tomcat6/webapps/项目名
	
		部署在同一容器中的Web项目，要配置不同的<param-value>，不能重复，否则报类似下面的错误:
		Web app root system property already set to different value: 'webapp.root' = [/home/user/tomcat/webapps/project1/] instead of [/home/user/tomcat/webapps/project2/] - Choose unique values for the 'webAppRootKey' context-param in your web.xml files!  
		意思是“webapp.root”这个key已经指向了项目1，不可以再指向项目2.
     -->
    <context-param>
		 <param-name>webAppRootKey</param-name>
		 <param-value>morpho.root</param-value>
	</context-param>
	<!--—————————————————————————————————————————————————————— servlet配置 ——————————————————————————————————————————————————————-->
	<!-- druid的监控servlet -->
	<!-- 内置监控页面的首页是/druid/index.html -->
	<servlet>
	  <servlet-name>DruidStatView</servlet-name>  
	  <servlet-class>com.alibaba.druid.support.http.StatViewServlet </servlet-class>
	  <!-- 权限过滤选项 -->
	  <!-- 判断规则：deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。
	  		如果allow没有配置或者为空，则允许所有访问  -->
	  <init-param>
	    <param-name>allow</param-name>
	    <param-value></param-value> <!--比如128.242.127.1/24,128.242.128.1不支持IPV6  -->
	  </init-param> 
	  <init-param>  
	    <param-name>deny</param-name>
	    <param-value></param-value>  
	  </init-param> 
	  <!-- 在StatViewSerlvet输出的html页面中，有一个功能是Reset All，
	  	        执行这个操作之后，会导致所有计数器清零，重新计数。你可以通过配置参数关闭它。 -->
	  <init-param>
        <param-name>resetEnable</param-name>
        <param-value>true</param-value>
   	  </init-param>
   	  <!-- 监控页面登录账户 ，这里是明文配置，可以结合apache shiro整合监控功能的权限-->
   	   <init-param>  
	        <param-name>loginUsername</param-name>  
	        <param-value>admin</param-value>  
   	   </init-param>  
   	   <!-- 数据源监控密码注意妥善保存 -->
	   <init-param>  
	        <param-name>loginPassword</param-name>  
	        <param-value>admin</param-value>  
	   </init-param>  
	</servlet> 
	
	<servlet-mapping>
	  <servlet-name>DruidStatView</servlet-name> 
	  <url-pattern>/druid/*</url-pattern>  
	</servlet-mapping>

	<!--springMVC前端控制器，用于加载springMVC的核心配置文件applicationContext-mvc.xml  -->
	<servlet>
		<servlet-name>springMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/applicationContext-mvc.xml</param-value>
		</init-param>
		<!--load-on-startup启动时加载顺序值为0或者大于0代表启动容器时就启动 多个servlet存在时数字越小优先级越高，
			当是一个负数时或者没有指定时，则指示容器在该servlet被使用到时才加载。   -->
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<!-- 拦截所有 -->
	<servlet-mapping>
		<servlet-name>springMVC</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- webservice apache cxf -->
	<servlet>
		<servlet-name>CXFServlet</servlet-name>
		<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>CXFServlet</servlet-name>
		<url-pattern>/webservice/*</url-pattern>
	</servlet-mapping>
	
	 <!-- 系统路径参数 -->
 	<servlet>
        <servlet-name>PathVarServlet</servlet-name>
    	<servlet-class>com.max256.morpho.common.web.servlet.PathVarServlet</servlet-class>
   	 	<load-on-startup>1</load-on-startup>
 	</servlet>
	<!--—————————————————————————————————————————————————————— filter过滤器配置——————————————————————————————————————————————————————-->
	  <filter>
	       <filter-name>gzipFilter</filter-name>  
	       <filter-class>
	           net.sf.ehcache.constructs.web.filter.GzipFilter
	       </filter-class>
	  </filter>
	  <filter-mapping>
	      <filter-name>gzipFilter</filter-name>
	      <url-pattern>*.json</url-pattern>
	      <url-pattern>*.xml</url-pattern>
	      <url-pattern>*.html</url-pattern>
	      <url-pattern>*.htm</url-pattern>
	      <url-pattern>*.shtml</url-pattern>
	      <url-pattern>*.js</url-pattern>
	      <url-pattern>*.jsp</url-pattern>
	      <url-pattern>*.css</url-pattern>
	      <!-- 图片不适应gzip压缩反而会变大 -->
	     <!--  <url-pattern>*.jpeg</url-pattern>
	      <url-pattern>*.jpg</url-pattern>
	      <url-pattern>*.png</url-pattern> -->
	  </filter-mapping>
		
	<!-- spring编码过滤器 -->
	<filter>
		<filter-name>SpringCharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<async-supported>true</async-supported>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>SpringCharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- XSSFilter防止注入,放在最前边！！ -->
	<filter>
		<filter-name>XSSFilter</filter-name>
		<filter-class>com.max256.morpho.common.web.filter.XSSFilter</filter-class>
		<async-supported>true</async-supported>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>filterPaths</param-name>
			<!-- 需要过滤的url路径 -->
			<param-value></param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>XSSFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	

	
	<!-- log4j2 ServletFilter -->
	<filter>
		<filter-name>log4jServletFilter</filter-name>
		<filter-class>org.apache.logging.log4j.web.Log4jServletFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>log4jServletFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
		<dispatcher>ERROR</dispatcher>
	</filter-mapping>
	

	
	
	<!-- 与apache shiro整合 shiro过滤器 -->
	<filter>
        <!--
		该值必须和spring容器中的
		<bean id="shiroSecurityFilter" 
			class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		中的id匹配
		-->
		<filter-name>shiroFilter</filter-name>
		<!-- shiro代理的这些filter是在applicationContext-shiro.xml配置文件中配置 -->
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<!-- * Default is "false"; target beans usually rely on the Spring application
			 * context for managing their lifecycle. Setting this flag to "true" means
			 * that the servlet container will control the lifecycle of the target
			 * Filter, with this proxy delegating the corresponding calls. -->
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<!-- 设置为true 代表servlet容器控制它的生命周期 -->
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<!-- 过滤类型防止因为servlet实现不规范，在不同容器间表现不一样 -->
		<!-- 这个元素有四个可能的值：即REQUEST,FORWARD,INCLUDE和ERROR，
			可以在一个<filter-mapping>元素中加入任意数目的<dispatcher>，
			使得filter将会作用于直接从客户端过来的request，
			通过forward过来的request，
			通过include过来的request
			和通过<error-page>过来的request。
			如果没有指定任何< dispatcher >元素，默认值是REQUEST。 -->
		<dispatcher>REQUEST</dispatcher> 
		<dispatcher>FORWARD</dispatcher> 
		<dispatcher>ERROR</dispatcher> 
	    <dispatcher>INCLUDE</dispatcher> 
	    <!-- （Tomcat调用filter过滤器是默认只拦截 REQUEST请求，这其实是符合servlet标准的，但jetty调用filter过滤器时会拦截所有请求） 
			例如我们的common.jsp被别的页面用<jsp:include>标签包含时，jetty下filter依然起作用，但tomcat可不理会，
			这样common.jsp里如果有shiro的jsp标签，这个标签会调用securityManager获取当前的用户对象，
			但由于shirofilter过滤器没起作用，会导致标签找不到上下文  -->
	</filter-mapping>
	
	<!-- 日志MDC 放在shiro后 -->
	<filter>
		 <filter-name>LogThreadContextFilter</filter-name>
   		 <filter-class>com.max256.morpho.common.web.filter.LogThreadContextFilter</filter-class>
   		 <!-- 经常需要排除一些不必要的url，比如.js,/jslib/等等。配置在init-param中。 -->
    		<init-param>
       		 	<param-name>appKey</param-name>
     	     	<param-value>系统</param-value>
   		    </init-param>
	</filter>
	<filter-mapping>
   		 <filter-name>LogThreadContextFilter</filter-name>
   		 <url-pattern>/*</url-pattern>
 	</filter-mapping>
	
	<!-- druid的WebStatFilter用于采集web-jdbc关联监控的数据。 -->
	<filter>
   		 <filter-name>DruidWebStatFilter</filter-name>
   		 <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
   		 <!-- 经常需要排除一些不必要的url，比如.js,/jslib/等等。配置在init-param中。 -->
    		<init-param>
       		 	<param-name>exclusions</param-name>
     	     	<param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
   		    </init-param>
   		 <!-- 缺省sessionStatMaxCount是1000个。你可以按需要进行配置 -->
   		 	<init-param>
        		<param-name>sessionStatMaxCount</param-name>
        		<param-value>1000</param-value>
    		</init-param>
    	 <!-- 你可以关闭session统计功能  当和apache shiro配合使用时 druid的session列表移除有问题 真正session已经销毁了 但是在druid里还存在  这里以shiro的session dao得到的结果为准 druid仅供参考-->
    	  <init-param>
        		<param-name>sessionStatEnable</param-name>
       		    <param-value>true</param-value>
   		  </init-param>
   		  <!-- druid 0.2.7版本开始支持profile，配置profileEnable能够监控单个url调用的sql列表。 -->
   		  <init-param>
    			<param-name>profileEnable</param-name>
   				 <param-value>true</param-value>
		  </init-param>
		  <!-- 方便druid监视页面的用户与session中系统用户名关联显示出来，参数是session中用户名的表示信息 -->
		<init-param>
			<param-name>principalSessionName</param-name>
			<param-value>sysUserName</param-value>
		</init-param>
		<!-- 如果是用cookie记录session的话 -->
		<!-- <init-param>
			<param-name>principalCookieName</param-name>
			<param-value>morpho.cookieid</param-value>
		</init-param> -->
 	</filter>
  	<filter-mapping>
   		 <filter-name>DruidWebStatFilter</filter-name>
   		 <url-pattern>/*</url-pattern>
 	</filter-mapping>
	
	
	<!-- javamelody监视器组件 在servlet3.0 （比如tomcat7）及以上环境中 可以不在这里进行以下配置 在jar包中的配置文件已经配置过了-->
	<!-- 这里显式地配置出来第一个重要的组件MonitoringFilter -->
	<filter>
		  <filter-name>monitoring</filter-name>
		  <filter-class>net.bull.javamelody.MonitoringFilter</filter-class>
	  	  <init-param>  
	  	  		<!-- javamelody的一些配置 -->
	  	  		<!-- 总开关disabled:默认false,配置为true将不再监控. -->
	  	  	   <param-name>disabled</param-name>  
               <param-value>false</param-value>
          </init-param>  
          <init-param>  
	  	  		<!-- 如下配置将开启info级别的日志记录 -->
	  	  	   <param-name>log</param-name>
               <param-value>true</param-value>
          </init-param>  
          <init-param>  
               <!-- 默认为:/monitoring,可以更改为其他地址,例如改为/mo,则监控地址改为:http://<host>:<port>/projectname/mo -->
               <param-name>monitoring-path</param-name>  
               <param-value>/monitoring</param-value>  
               <!-- no-database:默认false,配置为true将不监控和数据有关的行为 -->
               <!-- 我们这个系统数据库监控用druid自带的监控组件 -->
          </init-param>  
          <init-param>  
               <param-name>no-database</param-name>  
               <param-value>true</param-value>  
          </init-param>  
           <!-- 默认为以javamelody,tomcat为例,默认存储路径为TOMCAT_HOME/temp/javamelody -->
               <!-- 或者根据实际情况配置 -->
              <!--  <param-name>storage-directory</param-name>  
               <param-value></param-value>   -->
	</filter>
	<filter-mapping>
		  <filter-name>monitoring</filter-name>
		  <url-pattern>/*</url-pattern>
	</filter-mapping>
	
	
	<!-- 防止ajax时session超时 -->
	<filter>
		<filter-name>ajaxSessionTimeout</filter-name>
		<filter-class>com.max256.morpho.common.web.filter.AjaxSessionTimeoutFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>ajaxSessionTimeout</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 验证码过滤器需要放到Shiro之后 因为Shiro将包装HttpSession 如果不，可能造成两次的sesison id 不一样 -->  
	<filter>  
	  <filter-name>CaptchaFilter</filter-name>  
	  <filter-class>   
	   com.max256.morpho.common.web.filter.CaptchaFilter
	  </filter-class>  
	  </filter>  
	  <filter-mapping>  
	    <filter-name>CaptchaFilter</filter-name>  
	    <url-pattern>/captchacode</url-pattern>  
	</filter-mapping> 
	
	<!-- 日志配置文件为debug时输出到控制台 请求信息 -->
<!-- 	<filter>  
	  <filter-name>DebugRequestAndResponseFilter</filter-name>  
	  <filter-class>   
	   com.max256.morpho.common.web.filter.DebugRequestAndResponseFilter
	  </filter-class>  
	  </filter>  
	  <filter-mapping>  
	    <filter-name>DebugRequestAndResponseFilter</filter-name>  
	    <url-pattern>/*</url-pattern>  
	</filter-mapping>  -->
	
	
	<!--——————————————————————————————————————————————————————————————监听器配置————————————————————————————————————————————————————————————-->
	<!-- 同一个应用里面多个监听器，按在web.xml的注册顺序，依次执行 -->
	<!--用于防止内省api使用不当造成内存泄露的监听器  -->
	<!-- 
		  org.springframework.web.util.IntrospectorCleanupListener的用途
		  
		  此监听器出用于主要为了解决java.beans.Introspector导致内存泄漏的问题
		  此监听器应该配置在web.xml中与Spring相关监听器中的第一个位置(也要在ContextLoaderListener的前面)
		 
		  JDK中的java.beans.Introspector类的用途是发现Java类是否符合JavaBean规范
		 如果有的框架或程序用到了Introspector类,那么就会启用一个系统级别的缓存,此缓存会存放一些曾加载并分析过的JavaBean的引用
		  当Web服务器关闭时,由于此缓存中存放着这些JavaBean的引用,所以垃圾回收器无法回收Web容器中的JavaBean对象,最后导致内存变大
		  而org.springframework.web.util.IntrospectorCleanupListener就是专门用来处理Introspector内存泄漏问题的辅助类
		  IntrospectorCleanupListener会在Web服务器停止时清理Introspector缓存,使那些Javabean能被垃圾回收器正确回收
		  
		  Spring自身不会出现这种问题
		 因为Spring在加载并分析完一个类之后会马上刷新JavaBeans Introspector缓存,这就保证Spring中不会出现这种内存泄漏的问题
			 但有些程序和框架在使用了JavaBeans Introspector之后,没有进行清理工作(如Quartz,Struts),最后导致内存泄漏
		
	 -->
	<!-- 关于监听器顺序问题：servlet3以后的监听器启动顺序是按照声明顺序启动的，之前的标准是随机顺序启动，这点请注意！！！ -->
	<!-- log4j2 -->
	<listener>
		<listener-class>org.apache.logging.log4j.web.Log4jServletContextListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	
	<!--用于spring核心容器启动的监听器  -->
	<!--根据我们前边配置的context-param加载启动 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!--  使Spring支持request与session的scope -->
	<!-- 已经通过ContextLoaderListener(或ContextLoaderServlet)将Web容器与Spring容器整合，
		为什么这里还要用额外的RequestContextListener以支持Bean的另外3个作用域，
		原因是ContextLoaderListener实现ServletContextListener监听器接口，
		而ServletContextListener只负责监听Web容器的启动和关闭的事件。
		RequestContextFilter实现ServletRequestListener监听器接口，该监听器监听HTTP请求事件，
		Web服务器接收的每次请求都会通知该监听器。通过配置RequestContextFilter，
		Spring容器与Web容器结合的更加密切。 
	 -->
	 <!-- 可以使用RequestContextHolder.currentRequestAttributes() 获取到请求的attr -->
	<listener>
		<description>request作用域监听器</description>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	
	<!-- javamelody监视器组件 在servlet3.0 （比如tomcat7）及以上环境中 可以不在这里进行以下配置 在jar包中的配置文件已经配置过了-->
	<!-- 这里显式地配置出来第二个重要的组件SessionListener -->
	<!-- SessionListener是用于监听HTTP Session的，另外也监听Servlet Context -->
	<listener>
	  	<listener-class>net.bull.javamelody.SessionListener</listener-class>
	</listener>
	

	<!--自定义加强功能的监听器  -->
	<listener>
		<listener-class>com.max256.morpho.common.web.listener.MyContextListener</listener-class>
	</listener>
		
	<!--——————————————————————————————————————————————————————————————session配置 ————————————————————————————————————————————————————————————————-->
	<!-- 整合apache shiro的session管理后这个会失效，这里先配置上，不需要请删掉  
		  本项目中的session管理是shiro独立于servlet容器的session管理配置 本配置将不会起作用！！！
	 -->
	<!-- 配置session超时时间，单位分钟 -->
	<!-- <session-config>
		<cookie-config>
			<name>sid</name>
		</cookie-config>
		Disables URL-based sessions (no more 'jsessionid' in the URL using Tomcat) 
		<tracking-mode>COOKIE</tracking-mode>
	</session-config> -->
		
	<!--————————————————————————————————————————————————————————————————错误页配置 ——————————————————————————————————————————————————————————————————-->
	<!-- 系统内部错误才能访问到错误页面 因为在/WEB-INF/无法直接访问 -->
	<!-- 不过业务错误一般由controller 异常解析器进行跳转 如果走如下的错误配置 则是严重的系统错误 -->
	<!-- 404找不到页错误转向 -->
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/jsp/error/404.jsp</location>
	</error-page>
	<!-- 500系统内部错误转向 -->
	<error-page>
		<error-code>500</error-code>
		<location>/WEB-INF/jsp/error/500.jsp</location>
	</error-page> 
	
	<!-- 配置jstl标签库为本地加载 -->
	<!-- <jsp-config>
		<taglib>
			<taglib-uri>http://java.sun.com/jsp/jstl/core</taglib-uri>
			<taglib-location>/WEB-INF/tlds/c.tld</taglib-location>
		</taglib>
		<taglib>
			<taglib-uri>http://java.sun.com/jsp/jstl/fmt</taglib-uri>
			<taglib-location>/WEB-INF/tlds/fmt.tld</taglib-location>
		</taglib>
		<taglib>
			<taglib-uri>http://java.sun.com/jsp/jstl/fn</taglib-uri>
			<taglib-location>/WEB-INF/tlds/fn.tld</taglib-location>
		</taglib>
	</jsp-config> -->
	<jsp-config>
		<taglib>  
			<taglib-uri>http://www.max256.com/morpho/tags/functions</taglib-uri>  
			<taglib-location>/WEB-INF/tld/functions.tld</taglib-location>  
		</taglib> 
	</jsp-config>
	
</web-app>
